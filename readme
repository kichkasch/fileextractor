README for FileExtractor Version 0.1

Michael Pilgermann
Email to: mpilgerm@glam.ac.uk
Licensed under the Genreal Public License (GPL) 

Content
1. Introduction
2. Mode of operation
3. Signatures
4. Version Tracker
5. ToDo
6. Known Bugs
7. Possible test cases

1. Introduction
---------------
This program was implemented for searching for files inside binary sources. Apparently, the source files are image 
files containing all the data of a hard disk, a memory stick or a camera. It becomes useful whenever the 
File System on the device was damaged, maybe problems with the File Allocation Table or whatever. 
(The creating of the image file is beyond the scope of this program, it might be realised with tools such as 
EnCase or simply using the dd command in Linux/Unix environments).

2. Mode of operation
---------------------
FileExtractor may look for very different kinds of files. All it needs for a new file type is a signature telling the program 
how to find the beginning and the end of a file. (see next paragraph Signatures for more details) The beginning of a 
file may only be found by a defined sequence of bytes. The length of the sequence may vary; however, too short sequences 
might cause false positives for finding files. The end of a file may be determined by the following 3 different ways:
1.) An end sequence: Same as start sequence, the program will store all the data between the start of the 
    start sequence and the end of the end sequence to a new file.
2.) A location for the information about the file size: Many file formats store information about the file size of files at a 
    certain location within the file. As soon as the location is fixed and relative to the beginnning of the file, it may be 
    specified in the signature. (Offsets in Integers of different lengths are supported; just provide all the significant bytes 
    ordered starting with the highest byte - see Signature File signatures.py for more details.)
3.) User defined file end determination. You have a file type which starts with a certain sequence and you now how 
    to deteremin the end of the file; however, this cannot be performed with either of the first two ways. All you need to provide 
    is the name of the function to determine the end position (check signatures.py for required parameters and return values). 
    After importing the implemented python module the program will handover the control to the user-defined function whenever 
    the start of the file is found.

3. Signatures 
-------------
(more details in signatures.py):
* JPEG (type 1)
* BMP (type 2)
* GIF (type 1)
* CRW (type 3)
* CR2 (type 1)
* THM (type 1)
* WAV (type 2)
* PNG (type 1)

4. Version Tracker
------------------
----> moved to its own file changelog - check for it in program root directory

5. ToDo
-------
* guide / instructions / tool for creating an image of the partition, ...
* user guide
* finsih Help Dialog Content
* setup.py
* HelpBook for UserGuide
* performance enhancements - consider:
    - replacing compareLists with lib string functions or lib binary functions
    - buffering of reading / writing
* GUI - Indicator, whenever core is in manual function (may take some time where no progress is visible)
* Closing Threads in case of errors
* Error Handling
* new signature type for saving a predefined file size???
* Options Dialog
* Cancel Processing Button?
* More Signatures:
    - MP3
    - Movie Formats
* Possible Tools
    - Signature Creator
    - Image creator (gaining an image file from a source partition / fs)
    
6. Known Bugs
-------------
* Windows does not recognize the help zip file when assembled in Linux
* if started and no source file given - exception raised
* Program crashed when Access Denied for Source File
* No check for the address gained from files with signature type 2
* when image generator used, the program does not shut down properly ... some remaining threads

7. Possible test cases
----------------------
* ZipFile plain (no protection)
* ZipFile unencrypted but password
* ZipFile encrypted
* Other Archives (tar, ...)
* Outlook Archive File (pst) - plain
* Outlook Archive File (pst) - password protected
* Outlook Archive File (pst) - encrypted
* Other Mail Archives (Thunderbird, ...)
* Self Assembled Binary Files
* Image Files from Partitions with Data (dd command)
    * FAT
    * FAT32
    * NTFS
    * Linux EXT
    * Linux Reiser
* Encrypted Partitions
* Image File from a Memory Stick / Camera
